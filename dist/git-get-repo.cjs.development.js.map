{"version":3,"file":"git-get-repo.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["const downloadUrl = require('download');\nconst gitClone = require('git-clone');\nconst rm = require('rimraf').sync;\n\n/**\n * Download `repo` to `dest` and callback `fn(err)`.\n *\n * @param {String} repo\n * @param {String} dest\n * @param {Object} opts\n * @param {Function} fn\n */\n\nfunction download(repo: any, dest: string, opts: any, fn: Function) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n  opts = opts || {};\n  const clone = opts.clone || false;\n  delete opts.clone;\n\n  repo = normalize(repo);\n  const url = repo.url || getURL(repo, clone);\n\n  if (clone) {\n    const cloneOptions = {\n      checkout: repo.checkout,\n      shallow: repo.checkout === 'master',\n      ...opts,\n    };\n    gitClone(url, dest, cloneOptions, (err) => {\n      if (err === undefined) {\n        rm(dest + '/.git');\n        fn();\n      } else {\n        fn(err);\n      }\n    });\n  } else {\n    const downloadOptions = {\n      extract: true,\n      strip: 1,\n      mode: '666',\n      ...opts,\n      headers: {\n        accept: 'application/zip',\n        ...(opts.headers || {}),\n      },\n    };\n    downloadUrl(url, dest, downloadOptions)\n      .then(() => {\n        fn();\n      })\n      .catch((err) => {\n        fn(err);\n      });\n  }\n}\n\n/**\n * Normalize a repo string.\n *\n * @param {String} repo\n * @return {Object}\n */\n\nfunction normalize(repo: string) {\n  let regex: any = /^(?:(direct):([^#]+)(?:#(.+))?)$/;\n  let match: any[] = regex.exec(repo);\n  if (match) {\n    const url = match[2];\n    const directCheckout = match[3] || 'master';\n    return {\n      type: 'direct',\n      url: url,\n      checkout: directCheckout,\n    };\n  } else {\n    regex =\n      /^(?:(github|gitlab|bitbucket|gitee):)?(?:(.+):)?([^/]+)\\/([^#]+)(?:#(.+))?$/;\n    match = regex.exec(repo);\n\n    const type: string = match[1] || getType(repo);\n    let origin: any = match[2] || null;\n    const owner: string = match[3];\n    const name: string = match[4];\n    const checkout: string = match[5] || 'master';\n\n    const ori = {\n      github: 'github.com',\n      gitlab: 'gitlab.com',\n      bitbucket: 'bitbucket.org',\n      gitee: 'gitee.com',\n    };\n\n    origin = origin == null ? ori[type] : origin;\n\n    return {\n      type: type,\n      origin: origin,\n      owner: owner,\n      name: name,\n      checkout: checkout,\n    };\n  }\n}\n\nfunction getType(repo: string) {\n  const gits = ['github', 'gitlab', 'bitbucket', 'gitee'];\n  let type = gits[0];\n  gits.forEach((v) => {\n    if (repo.includes(v)) {\n      type = v;\n    }\n  });\n  return type;\n}\n\n/**\n * Adds protocol to url in none specified\n *\n * @param {String} url\n * @return {String}\n */\n\nfunction addProtocol(origin: string, clone: boolean): string {\n  if (!/^(f|ht)tps?:\\/\\//i.test(origin)) {\n    origin = clone ? `git@${origin}` : `https://${origin}`;\n  }\n\n  return origin;\n}\n\n/**\n * Return a zip or git url for a given `repo`.\n *\n * @param {Object} repo\n * @return {String}\n */\n\nfunction getURL(repo: any, clone: boolean): string {\n  // Get origin with protocol and add trailing slash or colon (for ssh)\n  let origin = addProtocol(repo.origin, clone);\n  origin = /^git@/i.test(origin) ? `${origin}:` : `${origin}/`;\n\n  const href = `${origin}${repo.owner}/${repo.name}`;\n  const uri: any = {\n    github: `${href}/archive/${repo.checkout}.zip`,\n    gitlab: `${href}/repository/archive.zip?ref=${repo.checkout}`,\n    bitbucket: `${href}/get/${repo.checkout}.zip`,\n    gitee: `${href}/repository/archive/${repo.checkout}.zip`,\n  };\n\n  const url = clone ? `${href}.git` : uri[repo.type];\n\n  return  url;\n}\n\nmodule.exports = download;\n"],"names":["downloadUrl","require","gitClone","rm","sync","download","repo","dest","opts","fn","clone","normalize","url","getURL","cloneOptions","checkout","shallow","err","undefined","downloadOptions","extract","strip","mode","headers","accept","then","regex","match","exec","directCheckout","type","getType","origin","owner","name","ori","github","gitlab","bitbucket","gitee","gits","forEach","v","includes","addProtocol","test","href","uri","module","exports"],"mappings":"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"}